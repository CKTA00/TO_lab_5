@startuml

class EventManager{
    +GenerateEvent(): void
}
' extends MonoBehaviour{

class Event{
    -location: Vector2
    -string: eventType
    +Event(Vector2 location)
    -EnterRandomState(): void
    +GetLocation(): Vector2
    +GetNeededVehicleAmount(): int
    +GetEventType(): String
}
Note left: bolded = unsure


'class EventState{
'    +<i>Update(): void</i>
'    +<i>GetNeededVehicleAmount(): int</i>
'}
'
'class Fire extends EventState{
'    +GetNeededVehicleAmount(): 2
'}
'
'class FalseAlarm extends EventState{
'    +GetNeededVehicleAmount(): 0
'}
'
'class OtherEvent extends EventState{
'    +GetNeededVehicleAmount(): 3
'}

interface SKKMObserver
{
    +DisposeIfPossible(): bool
}


class SKKM{
    -bases: BaseContainer
    -knownEvents: List<events>
    +SetStrategy(IDispositionStrategy s): void
    +Dispose(Vector2 location, in amount): void
}
Note right: bla bla

class Iterator<Abstract>{
    +<i>HasNext()
    +<i>Next()
}
class Aggregator<Abstract>{
    +<i>Iterate()
}

class BaseContainer extends Aggregator
{
    +CreateDefaultBases()
}

class BaseIterator extends Iterator
{

}

class Base extends Aggregator
{

}

class VehicleIterator extends Iterator
{

}

class Vehicle implements SKKMObserver{

}



interface IDispositionStrategy{
    +<i>ChoseVehicles(BaseContainer bases, Vector2 location, int amount): List<SKKMObserver>
}

class NearestBaseStrategy implements IDispositionStrategy {
}

class VehicleState<Abstract>{
    +<i>IsAvailable()</i>
    +<i>EnterState()</i>
    +<i>Update()</i>
}

class Available extends VehicleState{
}

class Disposed extends VehicleState{
}

Event *- "1" EventState

'Fire ..> "can transition" FalseAlarm
'OtherEvent ..> "can transition" FalseAlarm
'EventManager o-- "0..n" Event
Main --> SKKM
SKKM o-- "0..n" SKKMObserver
SKKM o--> IDispositionStrategy
SKKM *--"1" BaseContainer
BaseContainer *--"1..n" Base
Base *-- "3" Vehicle
VehicleState --o Vehicle
Main ... NearestBaseStrategy

Base --> VehicleIterator
BaseContainer --> BaseIterator


'note left of EventManager: Update is called every frame\nand is defined by Unity Engine\nin MonoBehaviour
@enduml
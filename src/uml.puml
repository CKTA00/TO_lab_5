@startuml

'TODO: Update uml (new VehicleStates, ui, many functions)

class Application <Final>{
    -updateTime: long = 50
    +Run()
    +GetCurrentUI: IGeneralUI
    -CreateDefaultBases()
    -Update()
}

interface IEventGenerator{
    +Generate(): EventAlarm
    +UpdateAndCheckForNewAlarm(long updateTime): boolean
}

class EventGenerator implements IEventGenerator{
    -pointFrom: Vector2
    -pointTo: Vector2
    -fireChance: float;
    -falseAlarmChance: float;
    -generatorTimer: long
    -maxNewAlarmTime: long
    -minNewAlarmTime: long
}

class EventAlarm{
    -location: Vector2
    -boolean: isFalseAlarm
    +EventAlarm(Vector2 location)
    +GetLocation(): Vector2
    +IsFalseAlarm(): boolean
    +<i>GetRequiredVehicleAmount(): int
    +<i>GetType(): String
}


class FireAlarm extends EventAlarm{
    +GetRequiredVehicleAmount(): 2
    +GetType(): "PZ"
}

class LocalThreatAlarm extends EventAlarm{
    +GetRequiredVehicleAmount(): 3
    +GetType(): "MZ"
}

interface ISKKMObserver
{
    +Send(EventAlarm event)
    +Update(long updateTime)
}


class SKKM{
    -bases: BaseContainer
    -List<ISKKMObserver> observersCollection
    +ChangeStrategy(IDispositionStrategy s): void
    +Alarm(EventAlarm eventAlarm): void
    -Dispose(Vector2 location, in amount): void

    +AddObserver(ISKKMObserver observer): void
    +RemoveObserver(ISKKMObserver observer): void
    +Notify(ISKKMObserver observer, EventAlarm event): void
    +NotifyAll(EventAlarm event): void
    +UpdateAll(): void
}

class Iterator<Abstract>{
    +<i>HasNext()
    +<i>Next()
}
class Aggregator<Abstract>{
    +<i>Iterate()
}

class BaseContainer extends Aggregator
{
    -list: List<Base>
    +AddBase(): void
    +SubscribeAllVehicles(SKKM center): void
}

class BaseIterator extends Iterator
{

}

class Base extends Aggregator
{
    +SubscribeAllVehiclesTo(SKKM center): void
}

class VehicleIterator extends Iterator
{

}

class Vehicle implements ISKKMObserver{
    -state: GenericVehicleState
    +disposed: DisposedVehicleState
    +available: AvailableVehicleState
    +inAction: InActionVehicleState
    +returning: ReturningVehicleState
    -name: String

    +IsAvailable(): boolean
    +GetName(): String


}

interface IDispositionStrategy{
    +<i>SendVehicles(SKKM ctx, EventAlarm event): void
}

class NearestBaseStrategy implements IDispositionStrategy {
    -TrySendingAndGetRest(SKKM ctx, Base nearestBase, EventAlarm event, int amount): int
}

class VehicleState<Abstract>{
    +<i>IsVehicleAvailable(): boolean</i>
    +<i>EnterState(): void</i>
    +<i>Update(Vehicle ctx, long time): void</i>
}

class AvailableVehicleState extends VehicleState{
}

class DisposedVehicleState extends VehicleState{
    -timeSinceDeploy: long
    -travelTime: long
}

class InActionVehicleState extends VehicleState{
    -timeSinceBeginning: long
    -actionTime: long
}

class ReturningVehicleState extends VehicleState{
    -timeSincePoint: long
    -travelTime: long
}


'Fire ..> "can transition" FalseAlarm
'OtherEvent ..> "can transition" FalseAlarm
EventGenerator "creates" --> EventAlarm
Application "sends events"--> SKKM
Application "requests new event"--> IEventGenerator
SKKM o-- "0..5n" ISKKMObserver
SKKM o--> IDispositionStrategy
Application *-->"1" BaseContainer
BaseContainer *--"1..n" Base
Base *-- "5" Vehicle
VehicleState -- Vehicle
'Main ... NearestBaseStrategy

Base "creates"--> VehicleIterator
BaseContainer "creates"--> BaseIterator


'note left of EventManager: Update is called every frame\nand is defined by Unity Engine\nin MonoBehaviour
@enduml